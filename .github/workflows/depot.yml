name: main

on:
  push:
    branches:
      - main
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - "*"

permissions:
  contents: read
  id-token: write
  packages: write

env:
    REGISTRY: ghcr.io

jobs:
    build:
        name: Build and Push Docker Image
        runs-on: ubuntu-24.04

        steps:
            - name: Checkout Repositoy
              uses: actions/checkout@v4

            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v5
              with:
                images: |
                    ghcr.io/${{ github.repository_owner }}/coprocessor-solver
                tags: |
                      type=semver,pattern={{version}}
                      type=ref,event=pr
                      type=raw,value=testing,enable=${{ github.ref == format('refs/heads/{0}', 'testing') }}
                      type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

                labels: |
                        org.opencontainers.image.title=Coprocessor Solver
                        org.opencontainers.image.description=Coprocessor Solver
            
            - name : Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Github Container Registry (GHCR)
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            
            - name: Setup Depot ClI
              uses: depot/setup-action@v1
              
            - name: Build and push (depot)
              uses: depot/bake-action@v1
              with:
                    project: ${{ vars.DEPOT_PROJECT }}
                    files: |
                        ./docker-bake.hcl
                        ./docker-bake.platforms.hcl
                        ${{ steps.meta.outputs.bake-file }}
                    push: true

    sanity:
        name: Coprocessor Solver Sanity Check
        runs-on: ubuntu-24.04
        needs: build

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
              with:
                submodules: recursive
                repository: "${{ github.repository_owner }}/coprocessor"

            - name: Set up Docker compose
              uses: docker/setup-buildx-action@v3

            - name: Pull latest images
              run: docker compose -f docker-compose-devnet.yaml pull
      
            - name: Start docker-compose service
              run: IPFS_DAEMON_ONLINE= docker compose -f docker-compose-devnet.yaml up --wait -d || (docker compose -f docker-compose-devnet.yaml logs && false)
            - name: Install jq
              run: sudo apt-get update && sudo apt-get install -y jq
    
    update-latest:
        name: Update latest dev image on fly.io
        runs-on: ubuntu-24.04
        needs: sanity
        if: ${{ github.ref == 'refs/heads/main' }}
        steps:
            - name: Set up Fly CLI
              uses: superfly/flyctl-actions/setup-flyctl@master
            - name: Update Fly Machines with updated Image
              run: |
                  docker pull ${{ env.REGISTRY }}/${{ github.repository }}:latest
                  DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY }}/${{ github.repository }}:latest)
                  flyctl image update --app ${{ env.APP_NAME }} --image $DIGEST --yes
              env:
                  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
                  APP_NAME: cartesi-coprocessor-solver-dev
                  REGISTRY: ${{ env.REGISTRY }}
                  GITHUB_REPOSITORY: ${{ github.repository }}

    update-testing:
      name: Update latest testing image on fly.io
      runs-on: ubuntu-24.04
      needs: sanity
      if: ${{ github.ref == 'refs/heads/testing' }}
      steps:
          - name: Set up Fly CLI
            uses: superfly/flyctl-actions/setup-flyctl@master
          - name: Update Fly Machines with updated Image
            run: |
                docker pull ${{ env.REGISTRY }}/${{ github.repository }}:testing
                DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY }}/${{ github.repository }}:testing)
                flyctl image update --app ${{ env.APP_NAME_TESTING }} --image $DIGEST --yes
            env:
                FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
                APP_NAME_TESTING: cartesi-coprocessor-solver-test
                REGISTRY: ${{ env.REGISTRY }}
                GITHUB_REPOSITORY: ${{ github.repository }}
