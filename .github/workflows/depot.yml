name: main

on:
    push:
        branches:
            - main
        tags:
            - "v[0-9]+.[0-9]+.[0-9]+"
    pull_request:
        branches:
            - "*"

jobs:
    build:
        name: Build and Push Docker Image
        runs-on: ubuntu-24.04
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: |
                        docker.io/zippiehq/cartesi-coprocessor-solver,enable=${{ github.event_name != 'pull_request' }}
                        ghcr.io/zippiehq/cartesi-coprocessor-solver
                  tags: |
                        type=semver,pattern={{version}}
                        type=ref,event=pr
                        type=raw,value=testing,enable=${{ github.ref == format('refs/heads/{0}', 'testing') }}
                        type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
                  labels: |
                        org.opencontainers.image.title=Cartesi Coprocessor Solver
                        org.opencontainers.image.description=Cartesi Coprocessor Solver

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Github Container Registry (GHCR)
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push
              uses: docker/bake-action@v5
              if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
              with:
                  files: |
                      ./docker-bake.hcl
                      ./docker-bake.platforms.hcl
                      ${{ steps.meta.outputs.bake-file }}
                  set: |
                      *.cache-from=type=gha
                      *.cache-to=type=gha,mode=max
                  push: true

    sanity:
      name: Coprocessor sanity check
      needs: build
      runs-on: ubuntu-24.04

      steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          repository: "zippiehq/cartesi-coprocessor"

      - name: Set up docker compose
        uses: docker/setup-buildx-action@v2

      - name: Pull latest images
        run: docker compose -f docker-compose-devnet.yaml pull

      - name: Start docker-compose service
        run: IPFS_DAEMON_ONLINE= docker compose -f docker-compose-devnet.yaml up --wait -d || (docker compose -f docker-compose-devnet.yaml logs && false)
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Sanity Run
        run: |
          echo "Starting ensure process..."
          curl -X POST "http://localhost:3034/ensure/bafybeihpo6pncx7hyf26v6vszb25q4spszigxkfc4fxvamfzpy5b2bjydm/11084eeb3de8d6ad262736d1f59b129fc9c134ab52248d39c2c920facafe8403/289182342"

          # check the status
          check_status() {
            STATUS=$(curl -X POST -s "http://localhost:3034/ensure/bafybeihpo6pncx7hyf26v6vszb25q4spszigxkfc4fxvamfzpy5b2bjydm/11084eeb3de8d6ad262736d1f59b129fc9c134ab52248d39c2c920facafe8403/289182342" | jq -r '.operator_ids_with_states["931a13987a36a6508d2ade6961f55d97209a7b42f66a7f0fdd899dea8fcb7d4d"]')
            echo "Current status: $STATUS"
            if [ "$STATUS" == "ready" ]; then
              return 0
            else
              return 1
            fi
          }

          echo "Polling for status to be 'ready'..."
          for i in {1..600}; do
            if check_status; then
              echo "Status is ready."
              break
            fi
            echo "Status not ready yet. Waiting 10 seconds..."
            sleep 10
            if [ "$i" -eq 600 ]; then
              echo "Timeout waiting for status to be ready."
              exit 1
            fi
          done

          echo "Calling issue_task endpoint..."
          curl -X POST "http://localhost:3034/issue_task/11084eeb3de8d6ad262736d1f59b129fc9c134ab52248d39c2c920facafe8403/0xA44151489861Fe9e3055d95adC98FbD462B948e7" -d "example"

          echo "Sanity check completed successfully."

    update-latest:
      name: Update latest image
      runs-on: ubuntu-24.04
      needs: sanity
      if: ${{ github.ref == format('refs/heads/{0}', 'main') }}
      steps:
          - name: Set up Fly CLI
            uses: superfly/flyctl-actions/setup-flyctl@master
          - name: Update Fly Machines with updated Image
            if: ${{ github.ref == 'refs/heads/main' }}
            run: |
                docker pull ${{ env.REGISTRY }}/${{ github.repository }}:latest
                DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY }}/${{ github.repository }}:latest)
                flyctl image update --app ${{ env.APP_NAME }} --image $DIGEST --yes
            env:
                FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
                APP_NAME: cartesi-coprocessor-solver-dev
                REGISTRY: ${{ env.REGISTRY }}
                GITHUB_REPOSITORY: ${{ github.repository }}

    update-test:
        name: Update testing image
        runs-on: ubuntu-24.04
        needs: sanity
        if: ${{ github.ref == format('refs/heads/{0}', 'testing') }}
        steps:
            - name: Set up Fly CLI
              uses: superfly/flyctl-actions/setup-flyctl@master
            - name: Update Fly Machines with updated Image
              if: ${{ github.ref == 'refs/heads/testing' }}
              run: |
                docker pull ${{ env.REGISTRY }}/${{ github.repository }}:testing
                DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.REGISTRY }}/${{ github.repository }}:testing)
                flyctl image update --app ${{ env.APP_NAME_TESTING }} --image $DIGEST --yes
              env:
                FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
                APP_NAME_TESTING: cartesi-coprocessor-solver-test
                REGISTRY: ${{ env.REGISTRY }}
                GITHUB_REPOSITORY: ${{ github.repository }}